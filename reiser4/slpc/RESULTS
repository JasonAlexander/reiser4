NOTE -- These results are slightly out of date.  I have applied for an
OSDL project/account so that I can run more extensive tests on a large
SMP.  When I have finished those experiments I will write a nice
summary of the results to replace these.

======================================================================

The testslpc1 results explore two variable spaces: with or without
locking and the variable node size.  Insert, search, and delete times
are measured in average cycles.  The test has three phases: insert,
search, and delete.  The number of nodes, levels, and space efficiency
are reported.

****************************** TESTING ON ORBIT (UP) ******************************

NODESZ	LOCKING	FANOUT	INSERT	SEARCH	DELETE	NODES	LEVELS	SPACE	KEYS	PAIRSZ

64	no	3-7	1379	1150	1630	291904	9	45%	1048576	8
128	no	7-15	1238	904	1392	114024	6	57%	1048576	8
256	no	15-31	1444	892	1552	51632	5	63%	1048576	8
512	no	31-63	2099	1072	2145	24603	4	67%	1048576	8
1024	no	63-127	3455	1478	3422	12155	4	67%	1048576	8

64	yes	3-6	2432	2332	2839	352611	11	37%	1048576	8
128	yes	7-14	1820	1600	2069	122745	7	53%	1048576	8
256	yes	15-30	1840	1391	2038	53330	5	61%	1048576	8
512	yes	31-62	2396	1467	2537	25116	4	65%	1048576	8
1024	yes	63-126	3709	1813	3764	12277	4	67%	1048576	8

****************************** TESTING ON BOWL (SMP) ******************************

NODESZ	LOCKING	FANOUT	INSERT	SEARCH	DELETE	NODES	LEVELS	SPACE	KEYS	PAIRSZ

64	no	3-7	1301	1051	1518	291904	9	45%	1048576	8
128	no	7-15	1159	822	1289	114024	6	57%	1048576	8
256	no	15-31	1313	821	1399	51632	5	63%	1048576	8
512	no	31-63	1822	958	1868	24603	4	67%	1048576	8
1024	no	63-127	2936	1338	2948	12155	4	67%	1048576	8

64	yes	3-6	2662	2475	3157	352611	11	37%	1048576	8
128	yes	7-14	1960	1720	2227	122745	7	53%	1048576	8
256	yes	15-30	1911	1477	2110	53330	5	61%	1048576	8
512	yes	31-62	2283	1486	2441	25116	4	65%	1048576	8
1024	yes	63-126	3329	1838	3466	12277	4	67%	1048576	8

The testslpc2 results explore the effect of concurrency.  The test
begins by constructing an initial tree of some size containing the ODD
integers between 1 and some upper limit.  Then some number of
concurrent threads access the data structure using the configured
workload, some percentage of insert, search, and delete operations.
The test proceeds until a fixed number of operations have been applied
by the concurrent threads.

For the first run of experiments I repeated each test three times.
The results show that there is significant variance in the number of
restarts but otherwise the results are stable.  Still, the number of
restarts is a very small percentage of operations except for the
64-byte node case, which may be due to false sharing of the
cache-line.

****************************** TESTING ON BOWL (SMP) ******************************

(Initial Keys = 40000)

PROCS	NODESZ	TOTCYC	INSERT	SEARCH	DELETE	LEVELS	OPS	RESTART	I/S/D%

1	64	31.77e9	1549	1314	1784	10/8	16.78e6	0	25/50/25
1	64	31.72e9	1546	1311	1781	10/8	16.78e6	0	25/50/25
1	64	31.77e9	1548	1314	1784	10/8	16.78e6	0	25/50/25
1	128	23.15e9	1041	872	1120	6/5	16.78e6	0	25/50/25
1	128	23.18e9	1043	873	1121	6/5	16.78e6	0	25/50/25
1	128	23.16e9	1041	872	1120	6/5	16.78e6	0	25/50/25
1       256     21.05e9 912     774     943     4/4     16.78e6 0       25/50/25
1       256     21.05e9 912     774     942     4/4     16.78e6 0       25/50/25
1       256     21.08e9 914     776     945     4/4     16.78e6 0       25/50/25
1	512	21.57e9	980	771	1002	3/3	16.78e6	0	25/50/25
1	512	21.43e9	971	763	993	3/3	16.78e6	0	25/50/25
1	512	21.31e9	963	756	986	3/3	16.78e6	0	25/50/25
1	1024	25.41e9	1289	931	1291	3/3	16.78e6	0	25/50/25
1	1024	25.20e9	1275	920	1278	3/3	16.78e6	0	25/50/25
1	1024	25.14e9	1271	917	1273	3/3	16.78e6	0	25/50/25

2	64	25.84e9	2405	2122	2724	10/8	16.78e6	923	25/50/25
2	64	25.47e9	2400	2111	2654	10/8	16.78e6	1435	25/50/25
2	64	25.59e9	2426	2123	2672	10/8	16.78e6	1210	25/50/25
2       128     19.19e9 1576    1459    1774    6/5     16.78e6 2026    25/50/25
2       128     19.62e9 1692    1482    1840    6/5     16.78e6 4394    25/50/25
2       128     19.88e9 1755    1494    1871    6/5     16.78e6 6541    25/50/25
2	256	16.76e9	1403	1261	1441	4/4	16.78e6	38	25/50/25
2	256	16.78e9	1410	1267	1448	4/4	16.78e6	33	25/50/25
2	256	16.72e9	1394	1258	1435	4/4	16.78e6	13	25/50/25
2	512	16.55e9	1422	1198	1448	3/3	16.78e6	9	25/50/25
2	512	16.67e9	1437	1212	1466	3/3	16.78e6	7	25/50/25
2	512	16.47e9	1411	1187	1436	3/3	16.78e6	6	25/50/25
2	1024	18.75e9	1700	1338	1710	3/3	16.78e6	1	25/50/25
2	1024	18.92e9	1725	1358	1734	3/3	16.78e6	1	25/50/25
2	1024	18.79e9	1705	1344	1712	3/3	16.78e6	3	25/50/25

(Initial Keys = 400)

PROCS	NODESZ	TOTCYC	INSERT	SEARCH	DELETE	LEVELS	OPS	RESTART	I/S/D%

1       64      20.77e9 958     628     1143    5/4     16.78e6 0       25/50/25
1	128	15.24e9	518	458	603	3/3	16.78e6	0	25/50/25
1	256	13.56e9	439	373	451	2/2	16.78e6	0	25/50/25
1	512	14.01e9	469	386	501	2/2	16.78e6	0	25/50/25
1	1024	15.48e9	571	431	660	2/2	16.78e6	0	25/50/25

2	64	22.83e9	2256	1489	2689	5/5	16.78e6	119969	25/50/25
2	128	13.70e9	954	884	981	3/3	16.78e6	107	25/50/25
2	256	12.37e9	799	725	806	2/2	16.78e6	0	25/50/25
2	512	12.72e9	832	750	868	2/2	16.78e6	0	25/50/25
2	1024	13.78e9	968	822	1058	2/2	16.78e6	0	25/50/25

(Initial Keys = 40)

PROCS	NODESZ	TOTCYC	INSERT	SEARCH	DELETE	LEVELS	OPS	RESTART	I/S/D%

1	64	15.12e9	555	425	602	3/3	16.78e6	0	25/50/25
1	128	13.38e9	446	336	476	2/2	16.78e6	0	25/50/25
1	256	12.85e9	386	335	410	2/2	16.78e6	0	25/50/25
1	512	11.96e9	329	270	385	1/1	16.78e6	0	25/50/25
1	1024	11.86e9	329	270	362	1/1	16.78e6	0	25/50/25

2	64	16.37e9	1399	1017	1551	3/3	16.78e6	22800	25/50/25
2	128	12.27e9	740	702	744	2/2	16.78e6	0	25/50/25
2	256	12.49e9	767	721	784	2/2	16.78e6	0	25/50/25
2	512	11.08e9	632	567	704	1/1	16.78e6	0	25/50/25
2	1024	11.08e9	631	567	694	1/1	16.78e6	0	25/50/25

(Initial Keys = 4)

PROCS	NODESZ	TOTCYC	INSERT	SEARCH	DELETE	LEVELS	OPS	RESTART	I/S/D%

1	64	10.49e9	234	223	235	1/1	16.78e6	0	25/50/25
1	128	10.51e9	238	223	235	1/1	16.78e6	0	25/50/25
1	256	10.51e9	238	223	236	1/1	16.78e6	0	25/50/25
1	512	10.51e9	238	223	235	1/1	16.78e6	0	25/50/25
1	1024	10.51e9	238	223	235	1/1	16.78e6	0	25/50/25

2	64	9.91e9	502	491	501	1/1	16.78e6	0	25/50/25
2	128	9.92e9	503	492	502	1/1	16.78e6	0	25/50/25
2	256	9.91e9	501	491	501	1/1	16.78e6	0	25/50/25
2	512	9.91e9	501	491	501	1/1	16.78e6	0	25/50/25
2	1024	9.91e9	502	491	502	1/1	16.78e6	0	25/50/25

(Initial Keys = 4000000)

PROCS	NODESZ	TOTCYC	INSERT	SEARCH	DELETE	LEVELS	OPS	RESTART	I/S/D%

1	64	60.73e9	3444	2674	4059	14/13	16.78e6	0	25/50/25
1	128	42.59e9	2329	1823	2558	8/8	16.78e6	0	25/50/25
1	256	36.55e9	1900	1596	2001	6/6	16.78e6	0	25/50/25
1	512	37.84e9	2090	1583	2144	5/5	16.78e6	0	25/50/25
1	1024	47.50e9	2854	1970	2908	4/4	16.78e6	0	25/50/25

2	64	47.62e9	5302	4129	6122	14/13	16.78e6	30950	25/50/25
2	128	33.85e9	3781	2809	4167	8/8	16.78e6	50003	25/50/25
2	256	27.56e9	2741	2340	2866	6/6	16.78e6	1	25/50/25
2	512	28.33e9	2993	2299	3054	5/5	16.78e6	8	25/50/25
2	1024	32.72e9	3758	2602	3832	4/4	16.78e6	7	25/50/25

For a tree of approx 4000000 elements the 2-processor case is 25% faster
For a tree of approx 40000 elements the 2-processor case is 21% faster
For a tree of approx 400 elements the 2-processor case is 9% faster
For a tree of approx 40 elements the 2-processor case is 3% faster
For a tree of approx 4 elements the 2-processor case is 6% faster

It makes sense that smaller trees should see less speedup.  After
all, smaller trees have fewer locks.  The degenerate case would
be a single lock, which means no concurrency at all.  I am not
certain why the 4-element case is better than the 40-element case.
A 256 byte tree node holds a maximum of 32 keys, so a 40-element
tree is two levels and a 4-element tree has just one level.  When
we're just talking about one level, the speedup is likely due to
overlapping the actual tree operations with the surrounding
computation.

Condensed results:


#KEYS	#PROCS	#CYCLES	 #TREE	PERCENT	 AVG	 AVG	 AVG
	       (billion) LEVELS SPEEDUP SEARCH	 INSERT	 DELETE
                                        CYCLES	 CYCLES	 CYCLES

4	1	10.51	 1		223	 238	 236
4	2	9.91	 1	6%	491	 501	 501

40      1	12.85	 2		335	 386	 410
40      2	12.49	 2	3%	721	 767	 784

400     1	13.56	 2		373	 439	 451
400     2	12.37	 2	9%	725	 799	 806

4e4     1	21.05	 4		774	 912	 942
4e4     2	16.78	 4	21%	1267	 1410	 1448

4e6     1	36.55	 6		1596	 1900	 2001
4e6     2	27.56	 6	25%	2340	 2741	 2866
