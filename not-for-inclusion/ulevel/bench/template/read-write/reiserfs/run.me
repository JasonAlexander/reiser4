#! /bin/sh

STAGE=$(cat stage)

. options

SRC=$TOPDIR/linux-2.4.19.tar.gz
READNUM=30
WRITENUM=30

output ---ENTERING-STAGE: $STAGE---
CONTEXT=$CONTEXT:$STAGE

ORDERED=$TEST/$FSTYPE-ordered.tar.gz
REPFILE=$TEST/report

function mount_me()
{
	do_mount $FSTYPE $DEVICE $MPOINT $MOPTS                          || die
}

function reinit()
{
	# umount may fail
	do_it umount $MPOINT 2>/dev/null
	do_mkfs  $FSTYPE $DEVICE "$MKOPTS"                               || die
	mount_me
}

function readprepare()
{
	local SRC
	local DST
	local NUM

	SRC=$1
	DST=$2
	NUM=$3

	output Making $NUM copies of $SRC on $DST...

	cd $DST                                                          || die

	for i in `seq 1 $NUM`
	do
	    output Copy $i...
	    do_it mkdir $i                                               || die
	    cd $i >/dev/null                                             || die
	    do_it tar xzf $SRC                                           || die
	    cd ..                                                        || die
	done
}

function readbench()
{
	SRC=$1
	NUM=$2

	echo Testing read from $SRC...

	cd $SRC                                                          || die

	time \
	for i in `seq 1 $NUM`
	do
	    output Copy $i...
	    do_it mount -tramfs ramfs /mnt/ramfs                         || die
	    do_it cp -r $i /mnt/ramfs                                    || die
	    do_it umount /mnt/ramfs                                      || die
	done
}

function writebench()
{
	local DST
	local NUM

	DST=$1
	NUM=$2

	output Testing writing $NUM copied from $DST...

	for i in `seq 1 $NUM`
	do
	    output Copy $i...
	    do_it cp -r /mnt/ramfs $DST/$i                               || die
	done

	do_it umount /mnt/ramfs                                          || die
	do_it umount $DST                                                || die
}

function enterstage()
{
	echo RUNNING > stage
}

function switchto()
{
	local stage

	stage=$1

	cd $TEST                                                     || die
	do_it umount $MPOINT                                         || die
	echo $stage > stage
	systemrestart $KERNEL
}

case "$STAGE" in
	INIT)
	    enterstage
	    reportheader $REPFILE
	    echo FSTYPE:    $FSTYPE   >> $REPFILE
	    echo MOPTS:     $MOPTS    >> $REPFILE
	    echo MPOINT:    $MPOINT   >> $REPFILE
	    echo DEVICE:    $DEVICE   >> $REPFILE
	    echo MKOPTS:    $MKOPTS   >> $REPFILE
	    echo SRC:       $SRC      >> $REPFILE
	    echo READNUM:   $READNUM  >> $REPFILE
	    echo WRITENUM:  $WRITENUM >> $REPFILE

	    reinit
	    cd $MPOINT                                                   || die
	    do_it tar xzf $SRC                                           || die
	    do_it tar czf $ORDERED *                                     || die
	    cd $TEST
	    reinit
	    readprepare $ORDERED $MPOINT $READNUM
	    switchto READ
	;;
	READ)
	    enterstage
	    mount_me
	    echo Read timing >> $REPFILE
	    readbench $MPOINT $READNUM 2>> $REPFILE
	    switchto WRITE
	;;
	WRITE)
	    enterstage
	    reinit
	    mount -tramfs ramfs /mnt/ramfs                               || die
	    cd /mnt/ramfs                                                || die
	    tar xzf $ORDERED                                             || die
	    cd $TEST
	    echo Write timing >> $REPFILE
	    (time writebench $MPOINT $WRITENUM) 2>> $REPFILE
	    reportfooter $REPFILE
	    OUTCOME=DONE
	    echo DONE > stage
	;;
	RUNNING)
	    abort Previous run failed. Aborting.
esac

# Local variables:
# mode: shell-script
# tab-width: 8
# End:
