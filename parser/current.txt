the current condition of sys_reiser4



The last changes:

1.  bison(1) is to used to build parser.tab.c

    directory fs/reiser4/parser/bison-1.875 contains bison's 5 skeleton
    files slightly modified for ours needs. 
    Later, we can instead keep there only mentioned changes.

2. fs/reiser4/parser/parser_syntax.doc contains sys_reiser4 syntax description.

sys_reiser4 can do now:

1.      sys_reiser4("NAME <= A <- B");

	NAME<=A<-B;

	A and B are names of existing files.
	As result of this file A gets content of file B.
	NAME is temporary thing which stores result of operation (<- is an 
	assign operaion). NAME/assign_result and NAME/assign_length could be
	used further in command. 

2.      sys_reiser4("A <- B");

	The same as the above, but result can be obtains from A/assign_result
	and A/assign_length.


If NAME matches a name of existing file, that existing file is not
touched. This works as it is supposed to.

lets consider the following
sys_reiser4("/A/B/c <= a <- b");

/A/B/c is not  a full file name.
It is internal name where result of operation is stored temporary:
until either sys_reiser4 completes or closeing brace is encountered.


NAME lives inside surrounding brackets enclosing it or up to the end of
command if it is not inside of brackets.

Results of tested operations (assign operator) get stored
NAME/assign_result and NAME/assign_length.

If operation failed  NAME/assign_result contains error code.
NAME/assign_length contains number of bytes written before error
happened.

It is checked that the following
reiser4("(A <= B <- C); C <- A");
works correctly: that is A as result of B <- C does not get to C <-A.

The above is also checked when A does not exist. A from braces is not
used in C <- A even if file with name A does not exist.

This says that commands like:
reiser4("a <= b < c; (a <= d <- e; (a <= f <- g)); h <- a");
were tested and proper value of a were used in each cases. Nested
operators are implemeneted using stack data structure.


NAMES (thing which is created when  it appears to the left of "<=") can
be used further in a command everywhere where file name can be used.
The only difference is that accessing its metadata (file size, for
instance) will cause error.

NAME is not necessarily end name. It can contain a path section just
like any file. So far such NAMES were not tested yet completely.

sys_reiser4 has only assign operator so far.




So we need to implement the /process/range stuff (what did I call it,
not stuff, but flow?  pseudofile? tube?  sigh, it has been too long,
please remind me.....)  fairly urgently, yes?


sys_reiser4("foo <- \"Hello, world\n\"");

As a result of this operation file foo will get new content :"Hello, world\n".
If file foo does not exist - error -ENOENT will be returned.


>
What do we need this for?
When we discussed this last with you and Nikita we did not come to agreement how that can be implemented:

If we use strings like /process/range/* in sys_reiser4 command to refer to process address space we restrict namespace.
That is if strings like /process/range/* are handled  specially - there will be a problem to have regulal file /process/range.

Maybe, we can modify procfs to have /proc/PID/mem/range/ and use it to access address space of processes?


Mr. Saveliev has an ignorant  proposal:
Do we really need to deal with something looking like a path trying to specify memory range in process address space?
To access process address space from sys_reiser4 command can we just create a special operand?
Something like: MEMRANGE(100,200) where 100 is address of beginning of range, 200 is size of range? 


/memrange/100-200 is ok with me.




      The "NAME"  is not a object of file system. ok tested
      Rule for it name is common rule for object of FS, exept one rule: names in path no need corresponded object in FS. tested
      Time of a life of it limited to surrounding brackets or the end of the command string. (tested.)
      After this operator this name will have subnames "assign_result" and "assign_length", (ok tested)
      which will contain error code of assign and number of bytes written to file A. (ok tested)

      After name is dead the previously value of name is restored. (ok tested)
      This rule not depended of exist or not file in FS with same name. (ok tested)

      if file "name" exist in current directory, then it's value(lnode) pushed to stack. New value is created. (ok tested)

      This names is avalable in any expression as a file. (Only body of file. no any meta data) ?? (ok tested)
      parent of it is a current directory, or defined path. (tested current directory, need test for full pathname)
      It means we can use full pathname for access to it. ( tested, need more test)




   not yet ready create, remove and ets...

3. Realized in sys_reiser4 the method of analysis in the form of a tree.
   This means accommodation in memory of all tree of analysis with all elements of the file system, found during analysis.
   It will not allow to create, copy, etc. in one expression a plenty of files - the order of one million. (Hans's requirement)

     there are begun works on change for optimization of a method of analysis,
     partial replacement of a subtree with a stack of expressions,
     reduction of area of construction of a tree.





iso-8859-1